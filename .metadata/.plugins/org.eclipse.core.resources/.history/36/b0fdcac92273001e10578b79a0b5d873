package com.core.user.service.impl;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import com.core.user.entity.HttpUrls;
import com.core.user.entity.Rating;
import com.core.user.entity.User;
import com.core.user.repository.UserRepository;
import com.core.user.service.UserService;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	UserRepository userRepository;
	
	@Autowired
	RestTemplate restTemplate;
	
	Logger logger=LoggerFactory.getLogger(UserServiceImpl.class);
	
	@Override
	public List<User> findAllUserDetail() {
		// TODO Auto-generated method stub
		return userRepository.findAll();
	}

	@Override
	public User findSingleUserDetail(String userID) {
		// TODO Auto-generated method stub
		User user= userRepository.findById(userID).get();
		
		getListOfRatingGivenByUser_UsingRestTemplate(userID);
		
		return user;
	}
	
	private Rating  getListOfRatingGivenByUser_UsingRestTemplate(String userId){
		
		ResponseEntity<Rating> ratingList;
		Rating rating;
		
		HttpUrls httpUrls= HttpUrls.RATING_SERVICE;
		
		try {
			
			
			Map<String, String> requestPeram=new HashMap<>();
			requestPeram.put("userId", userId);
			//requestPeram.put("hotelId", "null");
			
			logger.info("rating service URL : {}"+ httpUrls.getServicUrl()+"?userId={userId}");
			
			//ratingList=restTemplate.getForEntity(httpUrls.getServicUrl()+"?userId={userId}", Rating.class,requestPeram);
			
			ResponseEntity<Rating[]> ratings=restTemplate.getForEntity(httpUrls.getServicUrl()+"?userId={userId}", Rating[].class, requestPeram);
			
			//logger.info("rating detal service response : {}", ratingList.getStatusCode() , ratingList.getBody());
			
			
			
			
			//rating= ratingList.getBody();
			
			//logger.info("rating detal : {}", rating.toString());
			
		
		} catch (RestClientException e) {
			logger.error("having some issue while calling Rating service : {}" + e.toString() );
			e.printStackTrace();
		}
		
		return null;
		
	}
	
	@Override
	public List<User> findUserDetailByName(String username) {
		// TODO Auto-generated method stub
		return userRepository.findByName(username);
	}

	@Override
	public List<User> findUserDetailByEmail(String userEmail) {
		// TODO Auto-generated method stub
		return userRepository.findByEmail(userEmail);
	}
	
	@Override
	public List<User> findUserDetailByNameAndEmail(String username, String userEmail) {
		// TODO Auto-generated method stub
		return userRepository.findDistinctByEmailAndName(userEmail, username);
	}
	
	@Override
	public User createUser(User user) {
		// TODO Auto-generated method stub
		user.setUserID(UUID.randomUUID().toString());
		return userRepository.save(user);
	}

	@Override
	public String removeUserDetail(String userID) {
		// TODO Auto-generated method stub
		userRepository.deleteById(userID);
		return "USER DELETED SUCCESFULLY";
	}
	
	@Override
	public User updateUser(User user) {
		return userRepository.save(user);
	}

}
